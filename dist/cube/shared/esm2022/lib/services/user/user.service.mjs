import { Injectable, Inject } from '@angular/core';
import { USER_ENDPOINTS } from '../../types/user.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class UserService {
    constructor(http, config) {
        this.http = http;
        this.config = config;
    }
    getPortalUrl(endpoint) {
        return `${this.config.baseUrl}${this.config.separator}${this.config.basePortPortal}${endpoint}`;
    }
    getBaseUrl(endpoint) {
        return `${this.config.baseUrl}${this.config.separator}${this.config.basePort}${endpoint}`;
    }
    save() {
        return this.http.post(this.getPortalUrl(USER_ENDPOINTS.SAVE), {});
    }
    getUser(userId) {
        return this.http.get(`${this.getPortalUrl(USER_ENDPOINTS.GET_USER)}/${userId}`);
    }
    getUserListFiltered(filterKey, page, excludeIdChat) {
        return this.http.get(`${this.getPortalUrl(USER_ENDPOINTS.GET_FILTERED)}/${filterKey}/${page}`);
    }
    updateProfilePic(picture) {
        return this.http.put(this.getPortalUrl(USER_ENDPOINTS.UPDATE_PICTURE), picture);
    }
    updateItemPerPage(itemPerPage) {
        return this.http.put(this.getPortalUrl(USER_ENDPOINTS.UPDATE_ITEMS_PER_PAGE), itemPerPage);
    }
    updateLanguage(lang) {
        return this.http.put(this.getPortalUrl(USER_ENDPOINTS.UPDATE_LANGUAGE), lang);
    }
    updateStatus(status) {
        return this.http.put(this.getPortalUrl(USER_ENDPOINTS.UPDATE_STATUS), status);
    }
    getUserPermissions(userId) {
        return this.http.get(`${this.getBaseUrl(USER_ENDPOINTS.GET_PERMISSIONS)}/${userId}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UserService, deps: [{ token: i1.HttpClient }, { token: 'SHARED_CONFIG' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UserService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['SHARED_CONFIG']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY3ViZS9zaGFyZWQvc3JjL2xpYi9zZXJ2aWNlcy91c2VyL3VzZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFDLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUlsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQUs1RCxNQUFNLE9BQU8sV0FBVztJQUNwQixZQUNZLElBQWdCLEVBQ1MsTUFBb0I7UUFEN0MsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNTLFdBQU0sR0FBTixNQUFNLENBQWM7SUFDckQsQ0FBQztJQUVHLFlBQVksQ0FBQyxRQUFnQjtRQUNqQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsUUFBUSxFQUFFLENBQUM7SUFDcEcsQ0FBQztJQUVPLFVBQVUsQ0FBQyxRQUFnQjtRQUMvQixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxFQUFFLENBQUM7SUFDOUYsQ0FBQztJQUVELElBQUk7UUFDQSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxPQUFPLENBQUMsTUFBYztRQUNsQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQsbUJBQW1CLENBQUMsU0FBaUIsRUFBQyxJQUFZLEVBQUMsYUFBc0I7UUFDckUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDaEIsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFLENBQzNFLENBQUM7SUFDTixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsT0FBb0M7UUFDakQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLEVBQ2hELE9BQU8sQ0FDVixDQUFDO0lBQ04sQ0FBQztJQUVELGlCQUFpQixDQUFDLFdBQW1CO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLEVBQ3ZELFdBQVcsQ0FDZCxDQUFDO0lBQ04sQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFZO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ2hCLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxFQUNqRCxJQUFJLENBQ1AsQ0FBQztJQUNOLENBQUM7SUFFRCxZQUFZLENBQUMsTUFBYztRQUN2QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFDL0MsTUFBTSxDQUNULENBQUM7SUFDTixDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBYztRQUM3QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNoQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUNqRSxDQUFDO0lBQ04sQ0FBQzsrR0E1RFEsV0FBVyw0Q0FHUixlQUFlO21IQUhsQixXQUFXLGNBRlIsTUFBTTs7NEZBRVQsV0FBVztrQkFIdkIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OzBCQUlRLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUsSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUGVybWlzc2lvbkR0byxQYWdpbmF0ZWRVc2Vyc0RUTyxVc2VyRFRPIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHlwZXMnO1xyXG5pbXBvcnQgeyBTaGFyZWRDb25maWcgfSBmcm9tICcuLi8uLi90eXBlcy9zaGFyZWQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgVVNFUl9FTkRQT0lOVFMgfSBmcm9tICcuLi8uLi90eXBlcy91c2VyLmNvbnN0YW50cyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgICAgICBASW5qZWN0KCdTSEFSRURfQ09ORklHJykgcHJpdmF0ZSBjb25maWc6IFNoYXJlZENvbmZpZ1xyXG4gICAgKSB7IH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBvcnRhbFVybChlbmRwb2ludDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWcuYmFzZVVybH0ke3RoaXMuY29uZmlnLnNlcGFyYXRvcn0ke3RoaXMuY29uZmlnLmJhc2VQb3J0UG9ydGFsfSR7ZW5kcG9pbnR9YDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEJhc2VVcmwoZW5kcG9pbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlnLmJhc2VVcmx9JHt0aGlzLmNvbmZpZy5zZXBhcmF0b3J9JHt0aGlzLmNvbmZpZy5iYXNlUG9ydH0ke2VuZHBvaW50fWA7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZSgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8dm9pZD4odGhpcy5nZXRQb3J0YWxVcmwoVVNFUl9FTkRQT0lOVFMuU0FWRSkse30pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXIodXNlcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFVzZXJEVE8+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldDxVc2VyRFRPPihgJHt0aGlzLmdldFBvcnRhbFVybChVU0VSX0VORFBPSU5UUy5HRVRfVVNFUil9LyR7dXNlcklkfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJMaXN0RmlsdGVyZWQoZmlsdGVyS2V5OiBzdHJpbmcscGFnZTogbnVtYmVyLGV4Y2x1ZGVJZENoYXQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBhZ2luYXRlZFVzZXJzRFRPPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8UGFnaW5hdGVkVXNlcnNEVE8+KFxyXG4gICAgICAgICAgICBgJHt0aGlzLmdldFBvcnRhbFVybChVU0VSX0VORFBPSU5UUy5HRVRfRklMVEVSRUQpfS8ke2ZpbHRlcktleX0vJHtwYWdlfWBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVByb2ZpbGVQaWMocGljdHVyZTogc3RyaW5nIHwgQXJyYXlCdWZmZXIgfCBudWxsKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8Ym9vbGVhbj4oXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9ydGFsVXJsKFVTRVJfRU5EUE9JTlRTLlVQREFURV9QSUNUVVJFKSxcclxuICAgICAgICAgICAgcGljdHVyZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlSXRlbVBlclBhZ2UoaXRlbVBlclBhZ2U6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0PGJvb2xlYW4+KFxyXG4gICAgICAgICAgICB0aGlzLmdldFBvcnRhbFVybChVU0VSX0VORFBPSU5UUy5VUERBVEVfSVRFTVNfUEVSX1BBR0UpLFxyXG4gICAgICAgICAgICBpdGVtUGVyUGFnZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGFuZ3VhZ2UobGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8Ym9vbGVhbj4oXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UG9ydGFsVXJsKFVTRVJfRU5EUE9JTlRTLlVQREFURV9MQU5HVUFHRSksXHJcbiAgICAgICAgICAgIGxhbmdcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVN0YXR1cyhzdGF0dXM6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0PGJvb2xlYW4+KFxyXG4gICAgICAgICAgICB0aGlzLmdldFBvcnRhbFVybChVU0VSX0VORFBPSU5UUy5VUERBVEVfU1RBVFVTKSxcclxuICAgICAgICAgICAgc3RhdHVzXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VyUGVybWlzc2lvbnModXNlcklkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBlcm1pc3Npb25EdG9bXT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFBlcm1pc3Npb25EdG9bXT4oXHJcbiAgICAgICAgICAgIGAke3RoaXMuZ2V0QmFzZVVybChVU0VSX0VORFBPSU5UUy5HRVRfUEVSTUlTU0lPTlMpfS8ke3VzZXJJZH1gXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSJdfQ==