import { Injectable, Inject } from '@angular/core';
import * as Stomp from 'stompjs';
import * as SockJs from 'sockjs-client';
import { BehaviorSubject, Subject } from 'rxjs';
import { WEBSOCKET_ENDPOINTS } from '../../types/websocket.constants';
import * as i0 from "@angular/core";
import * as i1 from "../auth/auth.service";
import * as i2 from "keycloak-angular";
export class WebSocketService {
    constructor(authService, keycloak, config) {
        this.authService = authService;
        this.keycloak = keycloak;
        this.config = config;
        this.subscriptions = [];
        this.isConnected = false;
        this.writingUsers = {};
        this.newChatMessage = new Subject();
        this.newStatus = new Subject();
        this.othersWriting = new BehaviorSubject({});
        this.newNotification = new Subject();
    }
    getWebSocketUrl() {
        return `${this.config.baseUrl}${this.config.separator}${this.config.basePort}${WEBSOCKET_ENDPOINTS.BASE_ENDPOINT}`;
    }
    connect() {
        this.stompClient = Stomp.over(new SockJs(this.getWebSocketUrl()));
        this.stompClient.connect({}, () => {
            console.warn("CONNESSO A WEB SOCKET");
            this.authService.userKeycloakBehaviorSubject.subscribe({
                next: (user) => this.userData = user
            });
            this.isConnected = true;
            this.registerUser();
            this.privateSubscription();
            this.statusSubscription();
            this.writingSubscription();
            this.notificationSubscription();
        });
    }
    async disconnect() {
        this.disconnectUser();
        await this.stompClient?.disconnect(() => {
            this.subscriptions.forEach((sub) => sub.sub.unsubscribe());
        });
        this.isConnected = false;
    }
    registerUser() {
        this.stompClient?.send(`${WEBSOCKET_ENDPOINTS.REGISTER}.${this.keycloak.getKeycloakInstance().subject}`);
    }
    disconnectUser() {
        this.stompClient?.send(WEBSOCKET_ENDPOINTS.DISCONNECT);
    }
    sendToOne(trigger) {
        this.stompClient?.send(WEBSOCKET_ENDPOINTS.SEND_TO_ONE, {}, JSON.stringify(trigger));
    }
    amIWriting(idchat, isWriting) {
        this.stompClient?.send(`${WEBSOCKET_ENDPOINTS.AM_I_WRITING}.${idchat}.${isWriting}`);
    }
    sendToGroup(trigger) {
        this.stompClient?.send(WEBSOCKET_ENDPOINTS.SEND_TO_GROUP, {}, JSON.stringify(trigger));
    }
    readMessage(id) {
        this.stompClient?.send(`${WEBSOCKET_ENDPOINTS.READ_MESSAGE}.${id}`);
    }
    privateSubscription() {
        this.onSubscription("Private", this.stompClient.subscribe(`${WEBSOCKET_ENDPOINTS.PRIVATE_SUBSCRIPTION}.${this.keycloak.getKeycloakInstance().subject}`, (message) => {
            this.newChatMessage.next(message.body);
        }));
    }
    statusSubscription() {
        this.onSubscription("Status", this.stompClient.subscribe(`${WEBSOCKET_ENDPOINTS.STATUS_SUBSCRIPTION}.${this.keycloak.getKeycloakInstance().subject}`, (newUserStatus) => {
            this.newStatus.next(JSON.parse(newUserStatus.body));
        }));
    }
    notificationSubscription() {
        this.onSubscription("Notification", this.stompClient.subscribe(`${WEBSOCKET_ENDPOINTS.NOTIFICATION_SUBSCRIPTION}.${this.keycloak.getKeycloakInstance().subject}`, () => {
            this.newNotification.next(true);
        }));
    }
    writingSubscription() {
        this.onSubscription("Writing", this.stompClient.subscribe(`${WEBSOCKET_ENDPOINTS.IS_WRITING_SUBSCRIPTION}.${this.keycloak.getKeycloakInstance().subject}`, (writingDto) => {
            const w = JSON.parse(writingDto.body);
            if (w.isWriting && (!this.writingUsers[w.chatId] || !this.writingUsers[w.chatId].includes(w.userId))) {
                if (!this.writingUsers[w.chatId]) {
                    this.writingUsers[w.chatId] = [];
                }
                this.writingUsers[w.chatId].push(w.userId);
            }
            else if (!w.isWriting && this.writingUsers[w.chatId] && this.writingUsers[w.chatId].includes(w.userId)) {
                this.writingUsers[w.chatId].splice(this.writingUsers[w.chatId].indexOf(w.userId), 1);
                if (this.writingUsers[w.chatId].length == 0) {
                    delete this.writingUsers[w.chatId];
                }
            }
            this.othersWriting.next(this.writingUsers);
        }));
    }
    onSubscription(key, sub) {
        for (let i = 0; i < this.subscriptions.length; i++) {
            if (this.subscriptions[i].key == key) {
                this.subscriptions[i].sub.unsubscribe();
                this.subscriptions.splice(i, 1);
            }
        }
        this.subscriptions.push({ key: key, sub: sub });
    }
    checkMessageSubscription(idChat, callBack) {
        this.onSubscription("Check", this.stompClient.subscribe(`${WEBSOCKET_ENDPOINTS.CHECK_SUBSCRIPTION}.${idChat}.${this.keycloak.getKeycloakInstance().subject}`, callBack));
    }
    checkmessageUnsubscribe() {
        for (let i = 0; i < this.subscriptions.length; i++) {
            if (this.subscriptions[i].key == 'Check') {
                this.subscriptions[i].sub.unsubscribe();
                this.subscriptions.splice(i, 1);
            }
        }
    }
    ngOnDestroy() {
        this.disconnect();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: WebSocketService, deps: [{ token: i1.AuthService }, { token: i2.KeycloakService }, { token: 'SHARED_CONFIG' }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: WebSocketService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: WebSocketService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.KeycloakService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['SHARED_CONFIG']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,